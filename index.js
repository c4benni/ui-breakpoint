const mediaListener=({media:t,callback:e,event:n="change"})=>{var a;try{t.addEventListener(n,e)}catch(n){/undefined is not a function/i.test(n.message)&&(null===(a=null==t?void 0:t.addListener)||void 0===a||a.call(t,e))}},setParseBreakpoints=(t,e)=>{const n=Object.entries(t).sort((t,e)=>{return parseInt(t[1])>parseInt(e[1])?1:-1}),a=[];return e&&a.push("<orientation>(orientation: landscape)"),n.forEach((t,e)=>{const i=t[0],o=parseInt(t[1]),r=parseInt((n[e+1]||[])[1]||"");a.push(`<${i}>(min-width:${o}px)${r?` and (max-width:${r-1}px)`:""}`)}),a};let parsedBreakpoints,installed=!1;function getBreakpointMediaName(t){var e,n,a,i;return(null===(i=null===(a=null===(n=null===(e=t.match)||void 0===e?void 0:e.call(t,/^<.+>/g))||void 0===n?void 0:n[0])||void 0===a?void 0:a.replace)||void 0===i?void 0:i.call(a,/<|>/g,""))||""}function updateBreakpointMediaListener(t){const e=t.name,n=/orientation/.test(e),a=t.matches,i=n?a?"landscape":"portrait":e,o=()=>{var e;n?this.output.orientation=i:this.output.is=i,null===(e=t.onChange)||void 0===e||e.call(t,this.output)};n?o():t.matches&&o()}function mounted(t){installed||parsedBreakpoints.forEach((e,n)=>{const a=window.matchMedia(e.replace(/^<.+>/g,"")),i=a.matches,o=getBreakpointMediaName(e);updateBreakpointMediaListener.call(this,{matches:i,name:o,index:n,onChange:t}),mediaListener({media:a,event:"change",callback:e=>{updateBreakpointMediaListener.call(this,{matches:e.matches,index:n,name:o,onChange:t})}})})}class BreakpointWrapper{constructor(t){this.output={is:"",orientation:""};const{config:e,useOrientation:n,onChange:a}=t;if(!e)throw new Error("A config object of breakpoints must be defined. Eg {sm: 0, md: 960}");if(Object.keys(e).length<2)throw new SyntaxError("Config object must have at least 2 breakpoints");installed||(parsedBreakpoints=setParseBreakpoints(e,n),mounted.call(this,a),Object.freeze(this))}get is(){return this.output.is}get orientation(){return this.output.orientation}}export default class Breakpoint{constructor(t){const e=new BreakpointWrapper(t);Object.defineProperty(this,"is",{get:()=>e.is}),e.orientation&&Object.defineProperty(this,"orientation",{get:()=>e.orientation})}}